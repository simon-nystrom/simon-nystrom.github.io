{"pageProps":{"source":{"compiledSource":"var N=Object.defineProperty,l=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var r=(e,n,t)=>n in e?N(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,a=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&r(e,t,n[t]);if(o)for(var t of o(n))c.call(n,t)&&r(e,t,n[t]);return e},m=(e,n)=>l(e,u(n));var i=(e,n)=>{var t={};for(var s in e)p.call(e,s)&&n.indexOf(s)<0&&(t[s]=e[s]);if(e!=null&&o)for(var s of o(e))n.indexOf(s)<0&&c.call(e,s)&&(t[s]=e[s]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var s=t,{components:e}=s,n=i(s,[\"components\"]);return mdx(MDXLayout,m(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"What is Ktor?\"),mdx(\"p\",null,\"Ktor is a Kotlin framework for building web applications and HTTP services.\"),mdx(\"p\",null,\"This blog post will focus on an issue I ran into recently concerning to JSON serialization when using Ktor (adding contextual serialization).\"),mdx(\"p\",null,\"If you're into Kotlin and you haven't tried Ktor yet, I highly suggest you try it out. You can read more about Ktor \",mdx(\"a\",a({parentName:\"p\"},{href:\"https://ktor.io/docs/welcome.html\"}),\"here\"),\".\"),mdx(\"hr\",null),mdx(\"h2\",null,\"JSON Serialization in Ktor\"),mdx(\"p\",null,\"The process of turning objects into JSON data is a common task and most of the time it's a non-issue; turning an \",mdx(\"inlineCode\",{parentName:\"p\"},\"Int\"),\" into a JSON number is simple, turning a \",mdx(\"inlineCode\",{parentName:\"p\"},\"String\"),\" into a JSON string is simple and so on. Eventually you will run into a situation where you need to either customize your serialization logic or provide a serialization implementation for a non-primitive value.\"),mdx(\"br\",null),mdx(\"p\",null,\"The \",mdx(\"a\",a({parentName:\"p\"},{href:\"https://ktor.io/docs/serialization.html\"}),\"Ktor docs\"),\" are great as a start and they even show you how to use three built-in converters (\",mdx(\"inlineCode\",{parentName:\"p\"},\"Gson\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"Jackson\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"kotlinx.serialization\"),\"). For my project I'm using \",mdx(\"inlineCode\",{parentName:\"p\"},\"kotlinx.serialization\"),\" and the issue at hand will be solved for that converter, but the concept is the same for the others.\"),mdx(\"br\",null),mdx(\"p\",null,\"A minimal \",mdx(\"inlineCode\",{parentName:\"p\"},\"Ktor\"),\" setup with JSON serialization might look like this:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-kotlin\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-kotlin\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token annotation builtin\"}),\"@Serializable\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"data\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"Response\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"val\"),\" value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" String\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"fun\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"embeddedServer\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Netty\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" port \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8080\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" host \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"127.0.0.1\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"install\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"ContentNegotiation\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"json\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n        routing `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"get\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"/\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n                call`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"respond\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"Response\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Hello World!\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"start\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"wait \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"As expected, visiting http://localhost:8080 returns the following:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-json\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token property\"}),'\"value\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Hello World!\"'),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"hr\",null),mdx(\"h2\",null,\"The Issue\"),mdx(\"p\",null,\"Let's illustrate a case where you might run into an issue.\"),mdx(\"br\",null),mdx(\"p\",null,\"In my project, I want failing requests, those that generate server-side exceptions, to translate these exceptions into response objects with the properties \",mdx(\"inlineCode\",{parentName:\"p\"},\"errorMessage\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"statusCode\"),\".\"),mdx(\"br\",null),mdx(\"p\",null,\"One might start by attempting the following:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-kotlin\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-kotlin\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token annotation builtin\"}),\"@Serializable\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"data\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"DuplicateEntryException\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"val\"),\" errorMessage\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" String\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token annotation builtin\"}),\"@Contextual\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// Required, this specifies that this converter is expected to be found during runtime\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"val\"),\" statusCode\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" HttpStatusCode \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" HttpStatusCode\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`Conflict\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"RuntimeException\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"errorMessage\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"fun\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"embeddedServer\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Netty\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" port \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8080\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" host \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"127.0.0.1\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"install\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"ContentNegotiation\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"json\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n        routing `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"get\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"/\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n                `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// Faked error for simplicity's sake\"),`\n                call`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"respond\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"DuplicateEntryException\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"This entry already exists\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"start\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"wait \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"Starting the project now and visiting http://localhost:8080 will result in the following exception:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-json\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-json\"}),\"kotlinx.serialization.SerializationException\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),` Serializer for class 'HttpStatusCode' is not found.\n`))),mdx(\"hr\",null),mdx(\"h2\",null,\"The Solution\"),mdx(\"p\",null,\"As the exception is telling us, we need to register a serializer for the \",mdx(\"inlineCode\",{parentName:\"p\"},\"HttpStatusCode\"),\" type. There are two ways of doing this, depending on your use case. I will illustrate both variants below.\"),mdx(\"br\",null),mdx(\"p\",null,\"Our first order of business, which will be used in both solutions, is to define the custom serializer:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-kotlin\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-kotlin\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"object\"),\" HttpStatusCodeSerializer \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" KSerializer\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\"HttpStatusCode\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"override\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"fun\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"deserialize\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"decoder\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Decoder\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" HttpStatusCode \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),`\n        HttpStatusCode`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"fromValue\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"decoder\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"decodeInt\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"override\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"fun\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"serialize\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"encoder\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Encoder\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" HttpStatusCode\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        encoder`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"encodeInt\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"override\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"val\"),\" descriptor\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" SerialDescriptor \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"PrimitiveSerialDescriptor\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"HttpStatusCode\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" PrimitiveKind\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"INT\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"Basically, turn the \",mdx(\"inlineCode\",{parentName:\"p\"},\"HttpStatusCode\"),\" object into a primitive type, \",mdx(\"inlineCode\",{parentName:\"p\"},\"Int\"),\" in this case.\"),mdx(\"br\",null),mdx(\"p\",null,\"Next up we need to use this, the first way is to add it to our \",mdx(\"inlineCode\",{parentName:\"p\"},\"json()\"),\" converter definition, like so:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-kotlin\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-kotlin\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"fun\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"main\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"embeddedServer\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Netty\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" port \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"8080\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" host \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"127.0.0.1\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"install\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"ContentNegotiation\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"json\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Json \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n                serializersModule `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" SerializersModule \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n                    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"contextual\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"HttpStatusCode\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"::\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" HttpStatusCodeSerializer\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n                `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n        routing `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"get\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"/\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n                `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// Faked error for simplicity's sake\"),`\n                call`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"respond\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"DuplicateEntryException\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"This entry already exists\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"start\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"wait \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"I prefer this solution when you want your serialization to be easily reusable, for example \",mdx(\"inlineCode\",{parentName:\"p\"},\"DuplicateEntryException\"),\" is generic enough to be reused across use cases in the project.\"),mdx(\"br\",null),mdx(\"p\",null,\"If you want to customize serialization in a more localized fashion, something that might only be used for some specific purpose, you can do the following instead:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-kotlin\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-kotlin\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token annotation builtin\"}),\"@Serializable\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"data\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"DuplicateEntryException\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"val\"),\" errorMessage\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" String\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token annotation builtin\"}),\"@Contextual\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token annotation builtin\"}),\"@Serializable\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"with \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" HttpStatusCodeSerializer\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"::\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// Inform which Serializer to use for this property\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"val\"),\" statusCode\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" HttpStatusCode \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" HttpStatusCode\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`Conflict\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"RuntimeException\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"errorMessage\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`))),mdx(\"hr\",null),mdx(\"h2\",null,\"Resources\"),mdx(\"p\",null,\"If you want to learn more about \",mdx(\"inlineCode\",{parentName:\"p\"},\"Ktor\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"kotlinx.serialization\"),\", you can read more at the following resources:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",a({parentName:\"li\"},{href:\"https://ktor.io/docs/serialization.html\"}),\"Content negotiation and serialization\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",a({parentName:\"li\"},{href:\"https://ktor.io/docs/kotlin-serialization.html\"}),\"kotlinx.serialization for Ktor\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",a({parentName:\"li\"},{href:\"https://github.com/Kotlin/kotlinx.serialization\"}),\"kotlinx.serialization at GitHub\"))))}MDXContent.isMDXComponent=!0;\n","scope":{}},"meta":{"title":"Adding contextual serialization in Ktor","author":"Simon Nyström","date":"2021-01-15","tags":["kotlin","ktor"],"slug":"ktor-contextual-serialization"}},"__N_SSG":true}